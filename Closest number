#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

/*
 * Complete the 'closestNumber' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER a
 *  2. INTEGER b
 *  3. INTEGER x
 */

int closestNumber(int a, int b, int x) {
    // Calculate p = a^b rounded
    long long p = (long long)round(pow((double)a, (double)b));

    long long low = (p / x) * x;
    long long high = (p >= 0) ? low + x : low - x;

    long long difflow = llabs(p - low);
    long long diffhigh = llabs(high - p);

    if (difflow < diffhigh)
        return (int)low;
    else if (difflow > diffhigh)
        return (int)high;
    else
        return (int)high;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int t = parse_int(ltrim(rtrim(readline())));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        char** first_multiple_input = split_string(rtrim(readline()));

        int a = parse_int(*(first_multiple_input + 0));
        int b = parse_int(*(first_multiple_input + 1));
        int x = parse_int(*(first_multiple_input + 2));

        int result = closestNumber(a, b, x);

        fprintf(fptr, "%d\n", result);
        free(first_multiple_input);
    }

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);
    if (!data) return NULL;

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, (int)(alloc_length - data_length), stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        char* temp = realloc(data, alloc_length);
        if (!temp) {
            free(data);
            return NULL;
        }
        data = temp;
    }

    if (data_length > 0 && data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
        char* temp = realloc(data, data_length);
        if (temp) data = temp;
    } else {
        char* temp = realloc(data, data_length + 1);
        if (temp) {
            data = temp;
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) return NULL;
    while (*str && isspace((unsigned char)*str)) {
        str++;
    }
    return str;
}

char* rtrim(char* str) {
    if (!str) return NULL;
    size_t len = strlen(str);
    if (len == 0) return str;

    char* end = str + len - 1;
    while (end >= str && isspace((unsigned char)*end)) {
        end--;
    }
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    if (!str) return NULL;

    char** splits = NULL;
    int count = 0;
    char* token = strtok(str, " ");

    while (token) {
        char** tmp = realloc(splits, sizeof(char*) * (count + 1));
        if (!tmp) {
            free(splits);
            return NULL;
        }
        splits = tmp;

        splits[count++] = token;
        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    if (!str) exit(EXIT_FAILURE);

    char* endptr;
    long val = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0' || val > INT_MAX || val < INT_MIN) {
        exit(EXIT_FAILURE);
    }

    return (int)val;
}
